package com.codename1.demo;

import com.codename1.demo.forms.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Label;
import com.codename1.ui.Toolbar;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.util.UITimer;
import java.io.IOException;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class Main {

    private Form current;
    public static Form main;
    public static Resources theme;

    public void init(Object context) {        
        try {
            theme = Resources.openLayered("/theme");
            UIManager.getInstance().setThemeProps(theme.getTheme("Theme"));
            Resources.setGlobalResources(theme);
        } catch(IOException e){
            e.printStackTrace();
        }

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        main = new Form();
        main.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        main.setScrollableY(true);        
        Label title = new Label("UI Demo", theme.getImage("icon.png"));
        title.setUIID("Title");
        main.getToolbar().setTitleComponent(title);
        
        main.add(createDemoButton("Layouts", LayoutsForm.class));
        main.add(createDemoButton("Buttons", ButtonsForm.class));
        main.add(createDemoButton("Text Input", TextInputForm.class));
        main.add(createDemoButton("Tabs", TabsForm.class));
        main.add(createDemoButton("Dialog & Toast", DialogsForm.class));
        main.add(createDemoButton("Picker", PickerForm.class));
        main.add(createDemoButton("Contacts", ContactsForm.class));
        main.add(createDemoButton("Swipeable", SwipeToDeleteForm.class));
        main.add(createDemoButton("Infinite Container", InfiniteContainerForm.class));
        main.add(createDemoButton("Share", ShareForm.class));
        main.add(createDemoButton("Accordion", AccordionForm.class));
        main.add(createDemoButton("Browser", BrowserForm.class));
        main.add(createDemoButton("Table", TableForm.class));
        main.add(createDemoButton("ImageViewer", ImageViewerForm.class));
        main.add(createDemoButton("Signature", SignatureForm.class));
        main.add(createDemoButton("Themes", ThemesForm.class));
        
        
        Splash splash = new Splash();
        splash.show();
        UITimer timer = new UITimer(new Runnable() {

            @Override
            public void run() {
                main.show();
            }
        });
        timer.schedule(2000, false, splash);
        
        
    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }

    public void destroy() {
    }

    private Button createDemoButton(String title, final Class formClass) {
        Button b = null;
        b = new Button(title);
        b.addActionListener(e -> {
            Form f = null;
            try {
                f = (Form) formClass.newInstance();
            } catch (Exception ex) {
                Log.e(ex);
            }
            f.getToolbar().setBackCommand("", ev -> {
                main.showBack();
            });
            f.show();
        });

        return b;
    }

}
